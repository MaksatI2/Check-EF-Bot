import asyncio
import requests
import datetime
import time
from telegram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from pytz import timezone
from prometheus_client import start_http_server, Counter, Histogram, Gauge
import os
import sys

LOGIN_ATTEMPTS = Counter('login_attempts_total', 'Total login attempts', ['status'])
LOGIN_DURATION = Histogram('login_duration_seconds', 'Login request duration')
SERVICE_UP = Gauge('service_up', 'Service status (1=up, 0=down)')

LOGIN_URL = os.getenv('LOGIN_URL')
EMAIL = os.getenv('EMAIL')
PASSWORD = os.getenv('PASSWORD')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
GROUP_ID = os.getenv('GROUP_ID')
PROMETHEUS_PORT = int(os.getenv('PROMETHEUS_PORT', 8000))

required_vars = {
    'LOGIN_URL': LOGIN_URL,
    'EMAIL': EMAIL,
    'PASSWORD': PASSWORD,
    'TELEGRAM_TOKEN': TELEGRAM_TOKEN,
    'GROUP_ID': GROUP_ID
}

missing_vars = [var for var, value in required_vars.items() if not value]
if missing_vars:
    print(f"‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    sys.exit(1)

print("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
print(f"üìß Email: {EMAIL}")
print(f"üîó Login URL: {LOGIN_URL}")
print(f"üìä Prometheus port: {PROMETHEUS_PORT}")

bot = Bot(token=TELEGRAM_TOKEN)


async def send_telegram(msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram."""
    try:
        await bot.send_message(chat_id=GROUP_ID, text=msg, parse_mode="Markdown")
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {datetime.datetime.now()}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


async def check_login():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram."""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –≤ {datetime.datetime.now()}")
    
    timestamp_start = datetime.datetime.now()
    start_time = time.time()

    payload = {"email": EMAIL, "password": PASSWORD}

    try:
        with LOGIN_DURATION.time():
            response = requests.post(LOGIN_URL, json=payload, timeout=10)
        
        timestamp_end = datetime.datetime.now()
        elapsed = time.time() - start_time

        if response.status_code == 200:
            data = response.json()
            token = data.get("token", "–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞")
            LOGIN_ATTEMPTS.labels(status='success').inc()
            SERVICE_UP.set(1)
            
            msg = (
                f"üü¢ *–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥*\n"
                f"‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: `{timestamp_start.strftime('%Y-%m-%d %H:%M:%S')}`\n"
                f"‚è± –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: `{timestamp_end.strftime('%Y-%m-%d %H:%M:%S')}`\n"
                f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{elapsed:.2f} —Å–µ–∫.`\n"
                f"üìß Email: `{EMAIL}`\n"
            )
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω (status: 200, –≤—Ä–µ–º—è: {elapsed:.2f}s)")
        else:
            LOGIN_ATTEMPTS.labels(status='error').inc()
            SERVICE_UP.set(0)
            
            msg = (
                f"üî¥ *–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞*\n"
                f"‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: `{timestamp_start.strftime('%Y-%m-%d %H:%M:%S')}`\n"
                f"‚è± –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: `{timestamp_end.strftime('%Y-%m-%d %H:%M:%S')}`\n"
                f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{elapsed:.2f} —Å–µ–∫.`\n"
                f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {response.status_code}\n"
                f"üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n```{response.text[:500]}```"
            )
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞ (status: {response.status_code}, –≤—Ä–µ–º—è: {elapsed:.2f}s)")

    except requests.exceptions.RequestException as e:
        timestamp_end = datetime.datetime.now()
        elapsed = time.time() - start_time
        LOGIN_ATTEMPTS.labels(status='exception').inc()
        SERVICE_UP.set(0)
        
        msg = (
            f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏*\n"
            f"‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: `{timestamp_start.strftime('%Y-%m-%d %H:%M:%S')}`\n"
            f"‚è± –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: `{timestamp_end.strftime('%Y-%m-%d %H:%M:%S')}`\n"
            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: `{elapsed:.2f} —Å–µ–∫.`\n"
            f"‚ùå –û—à–∏–±–∫–∞: `{str(e)[:200]}`"
        )
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    await send_telegram(msg)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º."""
    print("=" * 60)
    print("ü§ñ Login Checker Bot –∑–∞–ø—É—â–µ–Ω")
    print(f"üìä Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –ø–æ—Ä—Ç—É {PROMETHEUS_PORT}")
    print(f"üåç –°–µ—Ä–≤–µ—Ä: {LOGIN_URL}")
    print(f"üìß Email: {EMAIL}")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 1 –º–∏–Ω—É—Ç–∞")
    print("=" * 60)
    
    try:
        start_http_server(PROMETHEUS_PORT)
        print(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PROMETHEUS_PORT}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)
    
    tz = timezone('Asia/Bishkek')
    
    scheduler = AsyncIOScheduler(timezone=tz)
    scheduler.add_job(check_login, 'interval', minutes=1)
    scheduler.start()
    print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    await send_telegram("üöÄ *–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–∞—Ç*\n\n"
                       f"üìß Email: `{EMAIL}`\n"
                       f"üåç URL: `{LOGIN_URL}`\n"
                       f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É")
    
    print("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    await check_login()
    
    try:
        print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        while True:
            await asyncio.sleep(3600)
    except (KeyboardInterrupt, SystemExit):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        scheduler.shutdown()
        await send_telegram("üõë *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)